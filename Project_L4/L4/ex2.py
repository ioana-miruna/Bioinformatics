from collections import Counter
import pandas as pd
import matplotlib.pyplot as plt

COVID_19_SEQ = "ATGTTTGTTTTTCTTGTTTTATTGCCACTAGTCTCTAGTCAGTGTGTTAATCTTACAACCAGAACTCAATTACCCCCTGCATACACTAATTCTTTCACACGTGGTGTTTATTACCCTGACAAAGTTTTCAGATCCTCACGACGTTGCATACCCGAAACGTTTTGGGATTAGATAAAGTGCATATTGAGACAACAGAATACAATATTTAAATTAATTGCACAATTTTAATATGATTTCACCCAAGACTTTCAACTTGGAAGTTATATAAACCTTTAACCGAAAATATCTAGTTAATATTCTTAGAAGACCTAACACTCAGTTATACATTAATAATGGCTTAGATTTAAAACCATTACCCCAGATTTAGGAATAGTATTACAGCAACTTTTCATTAGAAATTTGTGTCTTGCAATGGTTTCATAAATATTTTGCCTTTTTGCTTAACAATAATTTTGGTTTCCAAATTAGATGGCAATAAATACAACCTAATTAGGTTGTTATAGTGATTATAGTTGTAATGAACAGGTGAATATTCAATTGAGGTCGATATTACCTTTAATATTACACTAAAAGGTGTATTAGTTTTAATAATTGGTTATAAAATTCAACACCTTTAATGGATTACAAGCAATTTTGTCCCGAAAACGATTATTATACTCATCAGATGTATTACAAATGCAATCCACATTTGTCCTTTTAATAATATGGATTATGTTCGATCAAATTTTGATACTTTAGAAGATTTAAGTTCAGTTATTTCATAAATTCCTTAACTGAAATATTATCTTTTATAGATTTAGCACAACTTAAAGCACCAATTATAGAGTACTTACTGGCATTTTGAAGACATCTTTGGACATATTGTCACAAATGAAGTTTTTGGGATATGGGATTATGGCTTCATTACAGATGCAGATTTAAATGTTAATCAGACGATTATTGAAGGTCTAAAAATCGATGTTGTTGTATCAAAACATGGTTTGATATAATGCTTCATGGCATAGTTGAAACAGATGGAATCTTAACCAAATCAGTGTGTTAACTTGGTTATTATAGATAAATACCATCAGTCTTTCCCATTACATTGCAACTGGTATTTTGCATTAACTTCATTGTTTTAACAGATACTTCTTTTGATTGATATGATTTCTCCACATATTGATATTAGCAGACTTATTGTTTTATCTGACCACAAACTAGATTGTTAAAGATGTGTATGGTATTGCATCTGTTACACTCATAGTTCCCTATAGATTTAGCAGTTTAAATAACTGCAGTTACTTGGTATACTATACACTTAATGGAGTCGTATAAACAAATAGATGGTTCCCGTATTGAAATTGCAGACATTGCTTTAGATAATGGACGTAATAAGGTGTTCGATATAAACTTGCATAGGATATGGGAAAATACATTCTTGTGATAAAGCAGTTATCAAAATTTGGTGTCAACTCAGCTGTTGTTTTTACTGCAACAAATATAAACTATGTCCACTTACTATTCATTGCTGATCCAGTATTAGACGTTGATTATATGCCTATGGGCTATACTACATTTGATTATAGCAAAATACCAGTTGATTGGCCTTGTATTAGAAGCTTATGAGTATGTGTCCACTTCAATATGGTTGACAACCTACAAGACAATTTTAATGCTTACAGATTTTTTCACACTCAAAAGCAGCATTAGTGTCTGCCTTGAACATTGGTATTTTGACATCAACTTTAAAATGCAGATATTTTGTCCCAACTAACATATTTTTTAACCAGTTTGGGTTATTTTCATTTACTGGTGAAATTATTATCGTTACTCGTGATGTTGTTACATCAGCAAACCAAAATGTGAATATTGTTAGGAATCACCTGCTCTACACCTATTTGTTGGTGGTAAATTATGTCTGGAATAGATTGTTCTTTTCATAAAACCGTTACTTGCATAATATTGTATTTTTTATTGTAAATGATTATGTGTATACACCTACTCTGCCACAAATATTACTTATTAAGTATATGTAGTGTGTTAGGTTATATGTTAGAATCTCTAAAACACTTGTTAACATTAGCTATTTTTAATGGTTACAGAAACCATAACTCAAGATTGTTTTTTAACTTTTGTATCTGATGGGATTTATACACATTCAGTTTCTATTGGTGTTAAAGCTGTTCTCGACATTAATAGAATCATCTATTGGTCTTACAGGCCTTTGTTGTGTTAATTAAAGTTTCACAATCTAAAGATTACAAAATAAAGTCTACCGTGCGGATGTGGAACTCAACGTACATTGGTTACATACAGACGTATTACCAGTCAATATGTTCATTAGTATTGTCAGTTAAATGGAGTACACTTTAATTCACAGAGACTAAAATTGTTTACACAAATTATTTTACACCATTAGTAGCACCATTGAGCCAAGAAATCAAGGTTAACATTTAATAGATACCACAACTTTGGTGTGGTTGATAAAAAGTTAAATAAAATTACCATTAGTAGGAAGTTGA"
INFLUENZA_SEQ = "ATGAAGACTATCATTGCTTTAGTTTTATCTGGATCTTCGGCTCCAGGGGAGGGTTATATGGAAGCAAACTACTGGCACTTGTTTCGACACCGCAGACCCAACTGACACAGGGTGTGTCCCACCGAGAAGAACCTTACCATGAATGCATTGCGGATTCAAGTGAAACAGAATGTGAATATCATCATCGATAAAGGAAATAGTAACAGTTCGCAGAGATATTGAATTGAGAAGAGGAGTAAAACACCCCTTCCAGACCATGAAAATGCAACTAACGATTATGTGCCGGATTATGCCTTGGAAATATTGACACTGCCGGTCTTGTCCAAGTGTCTATCGGATTGGTTCCTCGGTCTCACTTATGTGAATGTTAATAGGGGGGAAAAATGATGGGAAAATTTCAACCTTGTCGGACTTGCAACAGCAGTGGCTTACAATCTGTGTGTGACATCGACAATAGAGTGCAACAGCTTCTACAGTGCCGGAGAGCCACTTGAAGCCAGTAACGAGTTCTCCAAGAAATGCTACTGAGGAAGTGGATGCTGATGGACGGAAGCAGAAAGTGACGTCAGGACTTGAAGAGCTCGTTTCAGATAGAGTTTTTAGTGGAGATGGCATTTGGTTACAGGGGAAGAAAGTGAACCGTGCAGAGATTTCCAGGGGGGGAGAGTTGCTGGTCGGATGTGCCTACCTTGCCTTCGAAAAGAAAACGAATGGGCAGGAGGTGGAGAAAAGACAGTTTGCTATCGGAGCTTTCGAACGTTTTGAAGAATTACCATGGAAAAGAAGGTAACGGGAAGTGGTAACACTAGTATTAGGGCAATACTTGGAAACTCCGATAGTATGTAACCCAAAGATATTGATGGAGACTGGTATCAATCAAGAGCAGGAATGGAAAGTGTTGGAAATGGAGACTGACATGGAAAGTGGTAACAGAATACAAAGACGTATTGGAAAAGAGAGTGAGAGTGGTGTCTTGAAGAGAAAAGGGGGGGAAAGAAGATGAAGTCTCCTATATTGTTGACCTTGAAGTCCCTAATGGGGGAATGGAAAAGTTTGGATGGATGGGGTTATGGCAACGGGTTCAGATAAATGTGATGGTGAATTTGCAGGTGTTGAATGGATGGAATATGGGACTATTCGATGGATCCACCGAGTTGAAAGCGTTCAAATTCATTGACGGGCCTGAAGGAATATTTGATGGATTAGACAGAAATGTTAAATGGGGAGGAAGCTGGGAATCAAAAGCCATCCAGGGAATAAATGAGGGGTATTACCAAAGCAGGAAGCAGTATTGGGAGCAGTGAAAGTCAGCAAACTGCTGGAACAAAGAAATCTATTCAGCATACTGTAGACAAATATGTGAGCAAATTGCAGAACTCTGTACCAGGAATTATGCAGAACTTCTTACCAGGAATATGAATGAAAATGGCTAGTGTGGTTTCAGCAGCCGAGATGAAAAATGAATTGGCTGAATGT"

genetic_code = {
    'TTT':'Phe', 'TTC':'Phe', 'TTA':'Leu', 'TTG':'Leu',
    'CTT':'Leu', 'CTC':'Leu', 'CTA':'Leu', 'CTG':'Leu',
    'ATT':'Ile', 'ATC':'Ile', 'ATA':'Ile', 'ATG':'Met',
    'GTT':'Val', 'GTC':'Val', 'GTA':'Val', 'GTG':'Val',

    'TCT':'Ser', 'TCC':'Ser', 'TCA':'Ser', 'TCG':'Ser',
    'CCT':'Pro', 'CCC':'Pro', 'CCA':'Pro', 'CCG':'Pro',
    'ACT':'Thr', 'ACC':'Thr', 'ACA':'Thr', 'ACG':'Thr',
    'GCT':'Ala', 'GCC':'Ala', 'GCA':'Ala', 'GCG':'Ala',

    'TAT':'Tyr', 'TAC':'Tyr', 'TAA':'Stop', 'TAG':'Stop',
    'CAT':'His', 'CAC':'His', 'CAA':'Gln', 'CAG':'Gln',
    'AAT':'Asn', 'AAC':'Asn', 'AAA':'Lys', 'AAG':'Lys',
    'GAT':'Asp', 'GAC':'Asp', 'GAA':'Glu', 'GAG':'Glu',

    'TGT':'Cys', 'TGC':'Cys', 'TGA':'Stop', 'TGG':'Trp',
    'CGT':'Arg', 'CGC':'Arg', 'CGA':'Arg', 'CGG':'Arg',
    'AGT':'Ser', 'AGC':'Ser', 'AGA':'Arg', 'AGG':'Arg',
    'GGT':'Gly', 'GGC':'Gly', 'GGA':'Gly', 'GGG':'Gly'
}

def get_codons(seq):
    seq = seq.upper().replace('\n', '').replace(' ', '')
    start_index = seq.find('ATG')
    if start_index == -1:
        return []
    codons = [seq[i:i+3] for i in range(start_index, len(seq), 3) if len(seq[i:i+3]) == 3]
    return codons

def calculate_frequencies(seq, code):
    codons = get_codons(seq)
    codon_counts = Counter(codons)
    total_codons = sum(codon_counts.values())

    aa_counts = Counter(code.get(codon, 'Unknown') for codon in codons if code.get(codon) != 'Stop')
    total_aa = sum(aa_counts.values())
    aa_freq = {aa: count / total_aa for aa, count in aa_counts.items()}

    filtered_codon_counts = {c: count for c, count in codon_counts.items() if code.get(c) != 'Stop' and code.get(c) is not None}
    codon_freq = {codon: count / total_codons for codon, count in codon_counts.items()}
    codon_to_aa = {codon: code.get(codon, '???') for codon in codon_counts}

    return filtered_codon_counts, codon_freq, codon_to_aa, aa_freq

def generate_report_and_chart(name, seq, code, color):
    codon_counts_filtered, codon_freq, codon_to_aa, aa_freq = calculate_frequencies(seq, code)
    top_10_codons = Counter(codon_counts_filtered).most_common(10)

    df_codons = pd.DataFrame(top_10_codons, columns=['Codon', 'Count'])
    df_codons['Amino Acid'] = df_codons['Codon'].apply(lambda x: codon_to_aa.get(x, '???'))
    df_codons['Frequency'] = df_codons['Codon'].apply(lambda x: codon_freq.get(x, 0))

    print(f"\n{'='*60}")
    print(f"Top 10 Most Frequent CODONS in the {name}")
    print(f"{'='*60}")
    print(df_codons[['Codon', 'Amino Acid', 'Count', 'Frequency']].to_markdown(index=False))

    plt.figure(figsize=(10, 6))
    plt.bar(df_codons['Codon'], df_codons['Count'], color=color)
    plt.xlabel('Codon')
    plt.ylabel('Count (Frequency of Occurrence)')
    plt.title(f'Top 10 Most Frequent Codons: {name}')
    plt.xticks(rotation=45, ha='right')
    plt.grid(axis='y', alpha=0.5)
    plt.tight_layout()
    plt.show()

    return df_codons, aa_freq

covid_df, covid_aa_freq = generate_report_and_chart(
    "COVID-19 (SARS-CoV-2 Spike Gene CDS)",
    COVID_19_SEQ,
    genetic_code,
    '#00796b'
)

influenza_df, influenza_aa_freq = generate_report_and_chart(
    "Influenza A (H1N1) HA Gene CDS",
    INFLUENZA_SEQ,
    genetic_code,
    '#ff6f00'
)

print(f"\n{'='*60}")
print("COMPARISON OF TOP 10 MOST FREQUENT CODONS (Part c)")
print(f"{'='*60}")

covid_codons = set(covid_df['Codon'])
influenza_codons = set(influenza_df['Codon'])
common_codons = sorted(list(covid_codons.intersection(influenza_codons)))

common_data = []
for codon in common_codons:
    aa = genetic_code.get(codon, '???')

    covid_row = covid_df[covid_df['Codon'] == codon].iloc[0]
    covid_rank = covid_df.index[covid_df['Codon'] == codon][0] + 1
    covid_count = int(covid_row['Count'])

    influenza_row = influenza_df[influenza_df['Codon'] == codon].iloc[0]
    influenza_rank = influenza_df.index[influenza_df['Codon'] == codon][0] + 1
    influenza_count = int(influenza_row['Count'])

    common_data.append({
        'Codon': codon,
        'AA': aa,
        'COVID-19 Rank': covid_rank,
        'COVID-19 Count': covid_count,
        'Influenza A Rank': influenza_rank,
        'Influenza A Count': influenza_count
    })

df_common = pd.DataFrame(common_data)

print("\nCommon Codons in Both Top 10 Lists:")
print(df_common.to_markdown(index=False))

print(f"\n{'='*60}")
print("TOP 3 MOST FREQUENT AMINO ACIDS (Part d - Console Output)")
print(f"{'='*60}")

covid_top_3_aa = Counter(covid_aa_freq).most_common(3)
print("\nCOVID-19 (SARS-CoV-2 Spike Gene):")
for aa, freq in covid_top_3_aa:
    print(f"{aa} - Frequency: {freq:.4f}")

influenza_top_3_aa = Counter(influenza_aa_freq).most_common(3)
print("\nInfluenza A (H1N1) HA Gene):")
for aa, freq in influenza_top_3_aa:
    print(f"{aa} - Frequency: {freq:.4f}")